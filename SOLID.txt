SOLID

SINGLE RESPONSIBILITY PRINCIPLE  -- CADA ARQUIVOS, CLASSES DEVE TER UMA UNÍCA RESPONSABILIDADE

OPEN CLOSED PRINCIPLE -- UMA CLASSE DEVE SER ABERTA PARA EXTENSÕES MAS NÃO PARA MODIFICAÇÕES, PODEMOS EXTENDER E REUTILIZAR UMA CLASSE MAS NÃO MODIFICAR POR COMPLETO

LISKOV SUBSTITUTION PRINCIPLE -- PODEMOS SUBSTITUIR IMPLEMENTAÇÃO DE FUNCIONALIDADE EXEMPLO UM UPLOAD DE ARQUIVOS

INTERFACE AGRAGATION PRINCIPLE -- NÃO CRIAR INTERFACES MUITO ROBUSTAS, CRIAR INTERFACES MENORES

DEPENDENCY INVERSION PRINCIPLE -- DETERMINA QUE AS CLASSES NÃO DEVEM DEPENDER DE IMPLEMENTAÇÕES E SIM DE INTERFACES



ARQUIVO CreateUserUseCase foi usado o SINGLE RESPONSIBILITY PRINCIPLE onde esse arquivo ficou com a responsabilidade e toda logica de Criação de Usuários da aplicação,
Também foi usado o LISKOV SUBSTITUTION PRINCIPLE onde temos o UsersRepository e falando o Tipo dele que é IUserRepository que mostra os metodos que existem independente de qual
seja o banco que esteja sendo utlizado
